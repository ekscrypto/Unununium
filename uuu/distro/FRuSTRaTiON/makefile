# $Header: /cvsroot/uuu/uuu/distro/FRuSTRaTiON/makefile,v 1.73 2001/12/19 03:03:45 daboy Exp $

# This is the device that will be used when installing bootsectors and such.
BOOT_DEV = /dev/fd0

# This is the root of the Uuu FS. By default it's 'uuu' in the currect
# directory, but if you have created a boot disk for Uuu you could mount
# that device and set this to the directory that disk is mounted under.
UUU_DIR = $(CURDIR)/uuu

# This is the directory the Uuu apps will be placed in.
APP_INST_DIR = $(UUU_DIR)/bin
export APP_INST_DIR

# This is the absloute path to the Uuu assembley include files
INCPATH = $(CURDIR)/../../include/
export INCPATH

# These define the target platform type, mostly required for bug workarounds.
# Currently defined are:
# __BOCHS__
# __VMWARE__
#TARGET_PLATFORM = __VMWARE__

# These define the assmebler to use and the flags for it
AS = nasm
ASFLAGS = -w+orphan-labels -w+number-overflow -w+macro-params -w+macro-selfref $(addprefix -i,$(INCPATH)) $(addprefix -D,$(TARGET_PLATFORM))
export AS ASFLAGS

# These define the program used to make the core and the flags for it
U3L = u3l
U3LFLAGS = --offset=00100000 --abort-on-warning --generate-vid-listing --redefinition-allowed --generate-core-map --stack-location=00007A00

# These define the program to use to convert an ELF file (generated by the
# assembler) to a UBF file (executable by Uuu)
ELF2UBF = elf2ubf
E2UFLAGS =
export ELF2UBF E2UFLAGS

# These define what directories to find the source for the cells and apps
CELLDIR = ../../src/cells/
APPDIR = ../../src/apps/

# This defines what cells to include in the core.
#
# A friendly note to developers: if you add a cell to the CVS makefile and it
# is broken, I'll rip your head off your shoulder using a plastic pen!
CELLS = \
memory_manager/oxygen \
debug/lanthane \
memory_manager/meitnerium \
jit/hydrogen \
lib/string/fasthash \
lib/string/common \
lib/app/common \
lib/terminal/common \
lib/environment \
ics/helium \
idt_irq/potassium \
debug/lolalife \
thread/strontium \
io/kbd_at/dragon \
io/kbd_at/dragon/english \
realmode/calcium \
debug/diable \
storage/ozone \
fs/devfs \
io/fdc/chromium \
fs/ext2 \
video/drivers/VGA \
video/display_manager/silicium \
io/console/silver \
dyn_link/executioner

# This defined the apps to build
APPS = \
ls \
dmesg \
ps \
shells/ish \
memstat

# *** nothing below this line should have to be modified ***

VPATH = $(INCPATH)
export VPATH

.PHONY: all $(CELLS) help

help:
	@echo
	@echo "The following targets are availible to build:"
	@echo "  ext2_boot_install - make a Uuu bootable disk from an ext2 floppy"
	@echo "  core_install - install the core on the floppy"
	@echo "  apps_install - install Uuu applications on the floppy"
	@echo "  install - install the core and apps"
	@echo
	@echo "If you are building Uuu for the first time and would like to create a bootable"
	@echo "floppy, follow these steps:"
	@echo
	@echo "  1) create an ext2 floppy ( mke2fs /dev/fd0 )"
	@echo "  2) install our ext2 bootloader on it ( make ext2_boot_install )"
	@echo "  3) mount your floppy"
	@echo "  4) install the Uuu core and applications ( make install UUU_DIR=/floppy )"
	@echo "  5) unmount your floppy"
	@echo
	@echo "If you plan to build Uuu many times or require finer control over the build take"
	@echo "a look in this makefile; it is well-commented and has many options."
	@echo

boot: ../../src/boot/eks_boot/boot.asm u3core.bin
	cp u3core.bin ../../src/boot/eks_boot/
	$(AS) -f bin ../../src/boot/eks_boot/boot.asm $(ASFLAGS)
	mv ../../src/boot/eks_boot/boot ./boot
	rm -f ../../src/boot/eks_boot/u3core.bin

mboot: ../../src/boot/berk_boot/boot.asm u3core.bin
	cp u3core.bin ../../src/boot/berk_boot/
	$(AS) -f bin ../../src/boot/berk_boot/boot.asm -DUUU $(ASFLAGS)
	mv ../../src/boot/berk_boot/boot ./mboot
	rm -f ../../src/boot/berk_boot/u3core.bin

u3core.bin: $(CELLS) osw.o test.o
	$(U3L) +osw.o $(addprefix +$(CELLDIR),$(join $(CELLS),$(addprefix /,$(addsuffix .o,$(notdir $(CELLS)))))) +test.o $(U3LFLAGS) u3core.bin

.PHONY: $(CELLS)

$(CELLS):
	@$(MAKE) --directory $(CELLDIR)$@

.PHONY: $(APPS)

$(APPS):
	@$(MAKE) --directory $(APPDIR)$@

.PHONY: ext2_boot.bin

ext2_boot.bin:
	@$(MAKE) --directory ../../src/boot/ext2_boot
	cp ../../src/boot/ext2_boot/boot.bin ext2_boot.bin

osw.o: osw.asm
	$(AS) -f elf osw.asm $(ASFLAGS) -p../../include/macros.inc

test.o: test.asm
	$(AS) -f elf test.asm -p../../include/macros.inc -p../../include/error_codes.inc $(ASFLAGS)

.PHONY: clean

clean:
	rm -rf u3core.bin *.o boot mboot functions.txt u3core.bin u3core.map
	@$(foreach dir,$(CELLS),$(MAKE) -C $(CELLDIR) -C $(dir) clean;)
	@$(foreach dir,$(APPS),$(MAKE) -C $(APPDIR) -C $(dir) clean;)

.PHONY: install

install: core_install apps_install

.PHONY: boot_install

boot_install: boot
	@echo "make: copying system image on first floppy drive"
	@if [ -w $(BOOT_DEV) ]; then dd if=boot of=$(BOOT_DEV) bs=512; \
	else echo 'No writeable floppy drive found'; exit 1; \
	fi;
	@echo "make: image succesfully created."

.PHONY: inst_ext2

ext2_boot_install: ext2_boot.bin
	@echo "make: installing boot sector on $(BOOT_DEV)"
	@if [ -w $(BOOT_DEV) ]; then dd if=ext2_boot.bin of=$(BOOT_DEV) bs=512 conv=notrunc; \
	else echo 'make: error: $(BOOT_DEV) is not writeable'; exit 1; \
	fi;
	@echo -e "\nmake: Uuu ext2 boot floppy sucessfully created.\n  u3core.bin must be in the root directory to boot;\n  make targets 'core_install' and 'app_install' can help you do this."

.PHONY: apps_install

apps_install:
	@[ -d $(APP_INST_DIR) ] || mkdir -p $(APP_INST_DIR)
	@$(foreach dir,$(APPS),$(MAKE) -C $(APPDIR) -C $(dir) install;)

.PHONY: core_install

core_install: u3core.bin
	@[ -d $(UUU_DIR) ] || mkdir $(UUU_DIR)
	cp u3core.bin $(UUU_DIR)

.PHONY: inst_mboot

inst_mboot: mboot
	@echo "make: copying system image on first floppy drive"
	@if [ -w $(BOOT_DEV) ]; then dd if=mboot of=$(BOOT_DEV) bs=512; \
	else echo 'No writeable floppy drive found'; exit 1; \
	fi;
	@echo "make: multiboot image succesfully created."
